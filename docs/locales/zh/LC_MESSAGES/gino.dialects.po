# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-present, Fantix King
# This file is distributed under the same license as the GINO package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GINO 0.7.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-21 12:19+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (https://www.transifex.com/decentfox-studio/teams/84194/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../gino.dialects.rst:2
msgid "gino.dialects package"
msgstr ""

#: ../../gino.dialects.rst:5
msgid "Submodules"
msgstr ""

#: ../../gino.dialects.rst:8
msgid "gino.dialects.asyncpg module"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncEnum:1
msgid "Bases: :class:`sqlalchemy.dialects.postgresql.base.ENUM`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncEnum:1
msgid "Construct an :class:`~.postgresql.ENUM`."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncEnum:3
msgid ""
"Arguments are the same as that of :class:`.types.Enum`, but also including "
"the following parameters."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncEnum:0
#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:0
msgid "Parameters"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncEnum:7
msgid ""
"Defaults to True. Indicates that ``CREATE TYPE`` should be emitted, after "
"optionally checking for the presence of the type, when the parent table is "
"being created; and additionally that ``DROP TYPE`` is called when the table "
"is dropped.    When ``False``, no check will be performed and no ``CREATE "
"TYPE`` or ``DROP TYPE`` is emitted, unless :meth:`~.postgresql.ENUM.create` "
"or :meth:`~.postgresql.ENUM.drop` are called directly. Setting to ``False`` "
"is helpful when invoking a creation scheme to a SQL file without access to "
"the actual database - the :meth:`~.postgresql.ENUM.create` and "
":meth:`~.postgresql.ENUM.drop` methods can be used to emit SQL to a target "
"bind.  .. versionadded:: 0.7.4"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncEnum:7
msgid ""
"Defaults to True. Indicates that ``CREATE TYPE`` should be emitted, after "
"optionally checking for the presence of the type, when the parent table is "
"being created; and additionally that ``DROP TYPE`` is called when the table "
"is dropped.    When ``False``, no check will be performed and no ``CREATE "
"TYPE`` or ``DROP TYPE`` is emitted, unless :meth:`~.postgresql.ENUM.create` "
"or :meth:`~.postgresql.ENUM.drop` are called directly. Setting to ``False`` "
"is helpful when invoking a creation scheme to a SQL file without access to "
"the actual database - the :meth:`~.postgresql.ENUM.create` and "
":meth:`~.postgresql.ENUM.drop` methods can be used to emit SQL to a target "
"bind."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:1
msgid "Bases: :class:`sqlalchemy.dialects.postgresql.base.PGCompiler`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:1
msgid "Construct a new :class:`.SQLCompiler` object."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:3
msgid ":class:`.Dialect` to be used"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:5
msgid ":class:`.ClauseElement` to be compiled"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:7
msgid ""
"a list of column names to be compiled into an INSERT or UPDATE statement."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:10
msgid ""
"whether to generate INSERT statements as \"inline\", e.g. not formatted to "
"return any generated defaults"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCompiler:13
msgid "additional keyword arguments to be consumed by the superclass."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgCursor:1
msgid "Bases: :class:`gino.dialects.base.Cursor`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDBAPI:1
msgid "Bases: :class:`gino.dialects.base.BaseDBAPI`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect:1
msgid ""
"Bases: :class:`sqlalchemy.dialects.postgresql.base.PGDialect`, "
":class:`gino.dialects.base.AsyncDialectMixin`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.get_isolation_level:1
msgid "Given an asyncpg connection, return its isolation level."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.has_sequence:1
msgid "Check the existence of a particular sequence in the database."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.has_sequence:3
msgid ""
"Given a :class:`.Connection` object and a string `sequence_name`, return "
"True if the given sequence exists in the database, False otherwise."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.has_table:1
msgid "Check the existence of a particular table in the database."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.has_table:3
msgid ""
"Given a :class:`.Connection` object and a string `table_name`, return True "
"if the given table (possibly within the specified `schema`) exists in the "
"database, False otherwise."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.on_connect:1
msgid "return a callable which sets up a newly created DBAPI connection."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.on_connect:3
msgid ""
"This is used to set dialect-wide per-connection options such as isolation "
"modes, unicode modes, etc."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.on_connect:6
msgid ""
"If a callable is returned, it will be assembled into a pool listener that "
"receives the direct DBAPI connection, with all wrappers removed."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.on_connect:9
msgid "If None is returned, no listener will be generated."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgDialect.set_isolation_level:1
msgid "Given an asyncpg connection, set its isolation level."
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgExecutionContext:1
msgid ""
"Bases: :class:`gino.dialects.base.ExecutionContextOverride`, "
":class:`sqlalchemy.dialects.postgresql.base.PGExecutionContext`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.AsyncpgIterator:1
#: ../../../gino/dialects/base.pydocstring of
#: gino.dialects.base.AsyncDialectMixin:1
#: ../../../gino/dialects/base.pydocstring of gino.dialects.base.BaseDBAPI:1
#: ../../../gino/dialects/base.pydocstring of gino.dialects.base.Cursor:1
#: ../../../gino/dialects/base.pydocstring of gino.dialects.base.DBAPICursor:1
#: ../../../gino/dialects/base.pydocstring of
#: gino.dialects.base.ExecutionContextOverride:1
#: ../../../gino/dialects/base.pydocstring of gino.dialects.base.Pool:1
#: ../../../gino/dialects/base.pydocstring of
#: gino.dialects.base.PreparedStatement:1
#: ../../../gino/dialects/base.pydocstring of gino.dialects.base.Transaction:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.DBAPICursor:1
msgid "Bases: :class:`gino.dialects.base.DBAPICursor`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of gino.dialects.asyncpg.Pool:1
msgid "Bases: :class:`gino.dialects.base.Pool`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.PreparedStatement:1
msgid "Bases: :class:`gino.dialects.base.PreparedStatement`"
msgstr ""

#: ../../../gino/dialects/asyncpg.pydocstring of
#: gino.dialects.asyncpg.Transaction:1
msgid "Bases: :class:`gino.dialects.base.Transaction`"
msgstr ""

#: ../../gino.dialects.rst:16
msgid "gino.dialects.base module"
msgstr ""

#: ../../gino.dialects.rst:25
msgid "Module contents"
msgstr ""

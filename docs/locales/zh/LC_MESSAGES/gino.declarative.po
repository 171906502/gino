# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017-present, Fantix King
# This file is distributed under the same license as the GINO package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GINO 0.7.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-08-21 12:19+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Language-Team: Chinese (https://www.transifex.com/decentfox-studio/teams/84194/zh/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../gino.declarative.rst:2
msgid "gino.declarative module"
msgstr ""

#: ../../../gino/declarative.pydocstring of gino.declarative.ColumnAttribute:1
#: ../../../gino/declarative.pydocstring of gino.declarative.Model:1
msgid "Bases: :class:`object`"
msgstr ""

#: ../../../gino/declarative.pydocstring of gino.declarative.declared_attr:1
msgid "Mark a class-level method as a factory of attribute."
msgstr ""

#: ../../../gino/declarative.pydocstring of gino.declarative.declared_attr:3
msgid ""
"This is intended to be used as decorators on class-level methods of a "
":class:`~Model` class. When initializing the class as well as its "
"subclasses, the decorated factory method will be called for each class, the "
"returned result will be set on the class in place of the factory method "
"under the same name."
msgstr ""

#: ../../../gino/declarative.pydocstring of gino.declarative.declared_attr:9
msgid ""
"``@declared_attr`` is implemented differently than "
":class:`~sqlalchemy.ext.declarative.declared_attr` of SQLAlchemy, but they "
"are both more often used on mixins to dynamically declare indices or "
"constraints (also works for column and ``__table_args__``, or even normal "
"class attributes)::"
msgstr ""

#: ../../../gino/declarative.pydocstring of gino.declarative.declared_attr:38
msgid "This doesn't work if the model already had a ``__table__``."
msgstr ""
